package appcloud.openapi.manager.util;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import appcloud.openapi.check.CommonParamsCheck;
import appcloud.openapi.check.InstanceOperateCheck;
import appcloud.openapi.check.InstanceParamsCheck;
import appcloud.openapi.check.impl.CommonParamsCheckImpl;
import appcloud.openapi.check.impl.InstanceOperateCheckImpl;
import appcloud.openapi.check.impl.InstanceParamsCheckImpl;
import appcloud.openapi.constant.ActionConstants;
import appcloud.openapi.constant.Constants;
import appcloud.openapi.constant.HttpConstants;
import appcloud.openapi.manager.CommonManager;
import appcloud.openapi.manager.InstanceManager;
import appcloud.openapi.manager.impl.CommonManagerImpl;
import appcloud.openapi.manager.impl.InstanceManagerImpl;
import appcloud.openapi.operate.InstanceOperate;
import appcloud.openapi.operate.impl.InstanceOperateImpl;

public class InstanceUnifiedCheckAndAuth {
/**
 * 该类主要用于在对云主机实例资源具体操作前进行统一的认证鉴权管理，主要检查请求参数的合理性和有效性
 */
	private InstanceManager instanceManager = InstanceManagerImpl.getInstance();
	private CommonManager commonManager = CommonManagerImpl.getInstance();
	private InstanceParamsCheck instanceParamsCheck = InstanceParamsCheckImpl.getInstance();
	private CommonParamsCheck commonParamsCheck = CommonParamsCheckImpl.getInstance();
	private InstanceOperate instanceOperate = InstanceOperateImpl.getInstance();
	private CommonGenerator commonGenerator = CommonGenerator.getInstance();
	private InstanceOperateCheck instanceOperateCheck = InstanceOperateCheckImpl.getInstance();
	private final Logger logger = Logger.getLogger(InstanceUnifiedCheckAndAuth.class);
	/**
	 * 云主机操作统计检查管理
	 * @param paramsMap  接口请求参数及其参数值
	 * @param defaultParamsMap  除请求参数外，含有默认值的参数及其参数值，这些默认值不参与签名认证检查
	 * @return
	 */
	public Map<String, String> InstanceCheckAndAuth(Map<String, String> paramsMap, Map<String, String> defaultParamsMap) {
		Map<String, String> resultMap = new HashMap<String, String>();
		try {
			resultMap = commonParamsCheck.checkCommonParams(paramsMap);
			if(null==resultMap || null==resultMap.get(Constants.HTTP_CODE) ||
					!resultMap.get(Constants.HTTP_CODE).equals(HttpConstants.STATUS_OK)) {
				logger.warn("The request common params was not authenticated successfully!");
				return resultMap;
			}
			//检查接口自身参数
			switch(paramsMap.get(Constants.ACTION)) {
			case ActionConstants.CREATE_INSTANCE :
				resultMap = instanceParamsCheck.checkCreateParams(paramsMap);
				break;
			case ActionConstants.START_INSTANCE :
				resultMap = instanceParamsCheck.checkStartParams(paramsMap);
				break;
			case ActionConstants.STOP_INSTANCE :
				resultMap = instanceParamsCheck.checkStopParams(paramsMap);
				break;
			case ActionConstants.REBOOT_INSTANCE :
				resultMap = instanceParamsCheck.checkRebootParams(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCE_STATUS :
				resultMap = instanceParamsCheck.checkDescribeInstanceStatusParams(paramsMap);
				break;
			case ActionConstants.DELETE_INSTANCE :
				resultMap = instanceParamsCheck.checkDeleteInstanceParams(paramsMap);
				break;
			case ActionConstants.RESET_INSTANCE :
				resultMap = instanceParamsCheck.checkResetInstanceParams(paramsMap);
				break;
			case ActionConstants.ISO_DETACH :
				resultMap = instanceParamsCheck.checkIsoDetachParams(paramsMap);
				break;
			case ActionConstants.ISO_BOOT :
				resultMap = instanceParamsCheck.checkIsoBootParams(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_ATTRIBUTE :
				resultMap = instanceParamsCheck.checkModifyInstanceAttributeParams(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_RESOURCE :
				resultMap = instanceParamsCheck.checkModifyInstanceResourceParams(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_SECURITYGROUP :
				resultMap = instanceParamsCheck.checkModifyInstanceSecurityGroupParams(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_CHARGETYPE :
				resultMap = instanceParamsCheck.checkModifyInstanceChargeTypeParams(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCE_MONITOR_DATA :
				resultMap = instanceParamsCheck.checkMonitorParams(paramsMap);
				break;
			case ActionConstants.MIGRATE_INSTANCE :
				resultMap = instanceParamsCheck.checkMigrateParams(paramsMap);
				break;
			case ActionConstants.ONLINE_MIGRATE_INSTANCE :
				resultMap = instanceParamsCheck.checkOnlineMigrateParams(paramsMap);
				break;
			case ActionConstants.SUSPEND_INSTANCE :
				resultMap = instanceParamsCheck.checkSuspendParams(paramsMap);
				break;
			case ActionConstants.RESUME_INSTANCE :
				resultMap = instanceParamsCheck.checkResumeParams(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCES :
				resultMap = instanceParamsCheck.checkDescInstancesParams(paramsMap);
				break;
			case ActionConstants.RENEW_INSTANCE :
				resultMap = instanceParamsCheck.checkRenewInstanceParams(paramsMap);
				break;
			default :
				resultMap = null;
				break;
			}
			if(null==resultMap || null==resultMap.get(Constants.HTTP_CODE) ||
					!resultMap.get(Constants.HTTP_CODE).equals(HttpConstants.STATUS_OK)) {
				logger.warn("The request speical params was not authenticated successfully!");
				return resultMap;
			}
			//签名认证
			resultMap = commonManager.getAuthenticate(paramsMap);
			if(null==resultMap || null==resultMap.get(Constants.HTTP_CODE) ||
					!resultMap.get(Constants.HTTP_CODE).equals(HttpConstants.STATUS_OK)) {
				logger.warn("The request signature was not authenticated successfully!");
				return resultMap;
			}
			/**
			 * 参数检查完毕后，要在创建云主机或者具体操作云主机前进行操作权限检查，
			 * 如创建云主机时要检查当前云主机是否达到上限，关闭云主机前要检查当前云主机状态等；
			 * 在检查时由于会涉及更多的参数，所以为了统一检查，要将defaultParamsMap中的值统一转移到paramsMap中。
			 * 若某些操作不需要进行操作权限检查，则直接返回即可。
			 */
			if(null!=defaultParamsMap && !defaultParamsMap.isEmpty()) {
				logger.info("Transfer default params to paramsMap.");
				for(Map.Entry<String, String> entry : defaultParamsMap.entrySet()) {
					paramsMap.put(entry.getKey(), entry.getValue());
				}
				logger.info("Transfer default params successfully.");
			}
			switch(paramsMap.get(Constants.ACTION)) {
			case ActionConstants.CREATE_INSTANCE :
				resultMap = instanceOperateCheck.checkCreateInstance(paramsMap);
				break;
			case ActionConstants.START_INSTANCE :
				resultMap = instanceOperateCheck.checkStartInstance(paramsMap);
				break;
			case ActionConstants.STOP_INSTANCE :
				resultMap = instanceOperateCheck.checkStopInstance(paramsMap);
				break;
			case ActionConstants.REBOOT_INSTANCE :
				resultMap = instanceOperateCheck.checkRebootInstance(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCE_STATUS :
				break;
			case ActionConstants.DELETE_INSTANCE :
				resultMap = instanceOperateCheck.checkDeleteInstance(paramsMap);
				break;
			case ActionConstants.RESET_INSTANCE :
				resultMap = instanceOperateCheck.checkResetInstance(paramsMap);
				break;
			case ActionConstants.ISO_DETACH :
				resultMap = instanceOperateCheck.checkIsoDetach(paramsMap);
				break;
			case ActionConstants.ISO_BOOT :
				resultMap = instanceOperateCheck.checkIsoBoot(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_ATTRIBUTE :
				resultMap = instanceOperateCheck.checkModifyInstanceAttribute(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_RESOURCE :
				resultMap = instanceOperateCheck.checkModifyInstanceResource(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_SECURITYGROUP :
				resultMap = instanceOperateCheck.checkModifyInstanceSecurityGroup(paramsMap);
				break;
			case ActionConstants.MODIFY_INSTANCE_CHARGETYPE :
				resultMap = instanceOperateCheck.checkModifyInstanceChargeType(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCE_MONITOR_DATA :
				resultMap = instanceOperateCheck.checkMonitor(paramsMap);
				break;
			case ActionConstants.MIGRATE_INSTANCE :
				resultMap = instanceOperateCheck.checkMigrate(paramsMap);
				break;
			case ActionConstants.ONLINE_MIGRATE_INSTANCE :
				resultMap = instanceOperateCheck.checkOnlineMigrate(paramsMap);
				break;
			case ActionConstants.SUSPEND_INSTANCE :
				resultMap = instanceOperateCheck.checkSuspend(paramsMap);
				break;
			case ActionConstants.RESUME_INSTANCE :
				resultMap = instanceOperateCheck.checkResume(paramsMap);
				break;
			case ActionConstants.DESCRIBE_INSTANCES :
				resultMap = instanceOperateCheck.checkDescInstancesParams(paramsMap);
				break;
			case ActionConstants.RENEW_INSTANCE :
				resultMap = instanceOperateCheck.checkRenewInstance(paramsMap);
				break;
			default :
				resultMap = null;
				break;
			}
			if(null==resultMap || null==resultMap.get(Constants.HTTP_CODE) ||
					!resultMap.get(Constants.HTTP_CODE).equals(HttpConstants.STATUS_OK)) {
				logger.warn("Check the operate instance permission is failed!");
				return resultMap;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error(e.getMessage(),e);
			resultMap.put(Constants.ERRORCODE, Constants.INTERNAL_ERROR);
			resultMap.put(Constants.ERRORMESSAGE,"The request processing has failed due to some unknown error.");
			resultMap.put(Constants.HTTP_CODE, HttpConstants.STATUS_INTERNAL_SERVER_ERROR+"");
			return resultMap;
		}
		logger.info("Check the params and the operation permission successfully, and result is OK!");
		resultMap.put(Constants.HTTP_CODE, HttpConstants.STATUS_OK);
		return resultMap;
	}
}
