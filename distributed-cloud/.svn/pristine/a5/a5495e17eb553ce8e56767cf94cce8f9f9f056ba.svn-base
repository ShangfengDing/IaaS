package appcloud.distributed.process;

import appcloud.distributed.CloudController;
import appcloud.distributed.header.ReadyToTransHeader;
import appcloud.distributed.process.operate.TransPortOperate;
import appcloud.distributed.process.operate.TransPortOperateImpl;
import appcloud.distributed.util.StringUtil;
import appcloud.netty.remoting.common.RequestCode;
import appcloud.netty.remoting.common.ResponseCode;
import appcloud.netty.remoting.protocol.RemoteCommand;
import appcloud.netty.remoting.remote.NettyRequestProcessor;
import io.netty.channel.ChannelHandlerContext;

/**
 * Created by lizhenhao on 2018/1/5.
 */
public class ReadyTransProcess implements NettyRequestProcessor{

    private CloudController cloudController;

    private TransPortOperate transPortOperate;

    public ReadyTransProcess(CloudController cloudController) {
        this.cloudController = cloudController;
        this.transPortOperate = new TransPortOperateImpl(cloudController.clientWapper);
    }


    public RemoteCommand processRequest(ChannelHandlerContext ctx, RemoteCommand request) throws Exception {
        int requestCode = request.getCode();
        RemoteCommand response;
        switch (requestCode) {
            case RequestCode.READY_IMAGE_BACK:
                request.decodeConsumerHeader(ReadyToTransHeader.class);
                ReadyToTransHeader readyToTransHeader = (ReadyToTransHeader) request.getConsumHeader();
                String destAddress = readyToTransHeader.getDestAddress();
                boolean needToClean = readyToTransHeader.isNeedToClean();
                String filePath = readyToTransHeader.getFilePath();
                /**
                 * 如果目的ip是空，并且需要重新传输，则重新选择目的云平台
                 */
                if (StringUtil.isEmpty(destAddress) && needToClean) {
                    // TODO: 2018/1/5 按照策略选择目的云平台(后期考虑，查询每个云平台是否正在进行传输任务，尽量选择没有传输任务的云平台！)
                }
                transPortOperate.transportImageBack(filePath,destAddress,needToClean);
                response = RemoteCommand.createReponseRemoteCommand(RequestCode.SUCCESS, ResponseCode.SUCCESSED);
                break;
            default:
                response = RemoteCommand.createReponseRemoteCommand(RequestCode.DEFAULT, ResponseCode.DEFAULT);
                break;
        }
        return response;
    }

    public boolean rejectRequest() {
        return false;
    }
}
