package com.distributed.common.factory;

import appcloud.netty.remoting.common.RequestCode;
import com.distributed.common.constant.Constants;
import com.distributed.common.rpc.RPCClient;
import com.distributed.common.service.controller.AccountClient;
import com.distributed.common.service.controller.ITransPort;
import com.distributed.common.service.controller.RouteInfoService;

/**
 * Created by zouji on 2018/1/15.
 * 与controller连接的rpc客户端工厂类
 */
public class ControllerFactory {

    public static RPCClient rpcClient = new RPCClient(Constants.RPC_HOST, Constants.RPC_PORT);
    private static volatile RouteInfoService routeInfoService;
    private static volatile AccountClient accountClient;
    private static volatile ITransPort iTransPort;

    public static RouteInfoService getRouteInfoService() {
        if (routeInfoService == null) {
            synchronized (ControllerFactory.class) {
                routeInfoService = (RouteInfoService) rpcClient.createProxy(RouteInfoService.class);
            }
        }
        return routeInfoService;
    }


    public static AccountClient getAccountClient() {
        if (accountClient == null) {
            synchronized (ControllerFactory.class) {
                accountClient = (AccountClient) rpcClient.createProxy(AccountClient.class);
            }
        }
        return accountClient;
    }

    public static ITransPort getITransPort() {
        if (iTransPort == null) {
            synchronized (ControllerFactory.class) {
                iTransPort = (ITransPort) rpcClient.createProxy(ITransPort.class);
            }
        }
        return iTransPort;
    }

}
